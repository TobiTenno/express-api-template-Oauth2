openapi: 3.0.2
info:
  description: "This is a server for %NAME%."
  version: 0.0.0-dev
  title: %NAME%
paths:
  /:
    get:
      tags:
        - Default
      summary: Get environment
      description: ""
      operationId: Default
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  index:
                    type: object
                    properties:
                      title:
                        type: string
                        example: Express Template
                      environment:
                        type: object
  /users:
    get:
      tags:
        - user
      summary: Get all users
      description: ""
      operationId: getAllUser
      security:
        - BearerAuth
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: User not found
  /users/signup:
    post:
      tags:
        - user
      summary: Signs user up for the system
      description: ""
      operationId: signupUser
      requestBody:
        $ref: '#/components/requestBodies/Credentials'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: Invalid username/password supplied
  /users/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      security:
        - Basic
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        "401":
          description: Invalid username/password supplied
  /users/logout:
    delete:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      security:
        - BearerAuth
      responses:
        default:
          description: successful operation
  "/users/{id}":
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      security:
        - BearerAuth
      parameters:
        - name: id
          in: path
          description: "The id of the user that needs to be fetched."
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
    patch:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      security:
        - BearerAuth
      parameters:
        - name: id
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Updated user object
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
externalDocs:
  description: Read more about this API
  url: https://github.com/%GITHUB_REPOSITORY%
servers:
  - url: http://localhost:3000
components:
  securitySchemes:
    BearerAuth:
      description: Bearer Token authentication. Prefix is "Token token="
      type: http
      scheme: bearer
    Basic:
      description: |
        Basic HTTP Authentication. Base-64 string in format of 'email:password'
      type: http
      scheme: basic
  requestBodies:
    Credentials:
      description: User credentials
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Credentials"
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Credentials:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          example: ThisisaReallyBadPassword
        password_confirmation:
          description: password confirmation field. Only checked on signup, should match sibling password
          type: string
          example: ThisisaReallyBadPassword
    User:
      type: object
      description: |
        Fields allowed to be edited:
          - email
          - password
      required:
        - id
        - email
      properties:
        _id:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: timestamp
        updatedAt:
          type: string
          format: timestamp
        token:
          type: string
          description: Bearer
