openapi: 3.0.2
info:
  title: Express API Template
  version: 0.0.0-dev
  description: This is a sample server Example server.
  license:
    name: MIT
    url: https://mit-license.org/
externalDocs:
  description: Read more about this API
  url: https://github.com/TobiTenno/express-api-template-Oauth2
servers:
  - url: http://localhost:3000
components:
  securitySchemes:
    BearerAuth:
      description: Bearer Token authentication. Prefix is "Bearer"
      type: http
      scheme: bearer
    Basic:
      description: Basic HTTP Authentication. Base-64 string in format of 'email:password'
      type: http
      scheme: basic
  requestBodies:
    Example:
      description: Example body
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Example"
  schemas:
    Example:
      type: object
      properties:
        _owner:
          type: string
          description: |
            Owner's user id.
        text:
          type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Credentials:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          example: ThisisaReallyBadPassword
        password_confirmation:
          description: password confirmation field. Only checked on signup, should match
            sibling password
          type: string
          example: ThisisaReallyBadPassword
    User:
      type: object
      description: |
        Fields allowed to be edited:
          - email
          - password
      required:
        - id
        - email
      properties:
        _id:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: timestamp
        updatedAt:
          type: string
          format: timestamp
        token:
          type: string
          description: Bearer
paths:
  /examples:
    get:
      tags:
        - examples
      summary: Get all examples
      description: ""
      operationId: getAllExample
      security:
        - BearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Example"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    post:
      tags:
        - examples
      summary: Make a new example object
      operationId: createExample
      requestBody:
        $ref: "#/components/requestBodies/Example"
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Example"
  "/examples/{id}":
    get:
      tags:
        - examples
      summary: Get a single example by id
      operationId: getExampleById
      parameters:
        - name: id
          in: path
          description: The id of the example to be fetched
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Example"
    patch:
      tags:
        - examples
      security:
        - BearerAuth: []
      summary: Modify an example
      requestBody:
        $ref: "#/components/requestBodies/Example"
      parameters:
        - name: id
          in: path
          description: The id of the example to be fetched
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Example"
    delete:
      tags:
        - examples
      summary: Delete an example
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/Example"
      parameters:
        - name: id
          in: path
          description: The id of the example to be fetched
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Operation successful
  /:
    get:
      tags:
        - Default
      summary: Get environment
      operationId: root
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  index:
                    type: object
                    properties:
                      title:
                        type: string
  /users:
    get:
      tags:
        - User
      summary: Get all users
      operationId: getAllUser
      security:
        - BearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: User not found
  "/users/{id}":
    get:
      tags:
        - User
      summary: Get user by user name
      operationId: getUserByName
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: The id of the user that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
    patch:
      tags:
        - User
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Updated user object
        required: true
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
  /users/signup:
    post:
      tags:
        - User
      summary: Signs user up for the system
      description: ""
      operationId: signupUser
      requestBody:
        $ref: "#/components/schemas/Credentials"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Invalid username/password supplied
  /users/login:
    post:
      tags:
        - User
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      security:
        - Basic: []
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        "401":
          description: Invalid username/password supplied
  /users/logout:
    delete:
      tags:
        - User
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      security:
        - BearerAuth: []
      responses:
        default:
          description: successful operation
tags:
  - name: examples
    description: Example endpoints for learning
  - name: User
    description: Interacts with the User schema
